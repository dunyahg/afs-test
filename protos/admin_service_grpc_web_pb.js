/**
 * @fileoverview gRPC-Web generated client stub for admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: admin_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var auth_pb = require('./auth_pb.js')

var common_pb = require('./common_pb.js')

var admin_pb = require('./admin_pb.js')

var subscription_pb = require('./subscription_pb.js')

var order_pb = require('./order_pb.js')
const proto = {};
proto.admin = require('./admin_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminAuthenticationServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminAuthenticationServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.auth.PublicTokenResponse>}
 */
const methodDescriptor_AdminAuthenticationService_request_public_token = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/request_public_token',
  grpc.web.MethodType.UNARY,
  common_pb.Empty,
  auth_pb.PublicTokenResponse,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  auth_pb.PublicTokenResponse.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.PublicTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.PublicTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.request_public_token =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/request_public_token',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_request_public_token,
      callback);
};


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.PublicTokenResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.request_public_token =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/request_public_token',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_request_public_token);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.AdminLoginRequest,
 *   !proto.common.StringValue>}
 */
const methodDescriptor_AdminAuthenticationService_login = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/login',
  grpc.web.MethodType.UNARY,
  admin_pb.AdminLoginRequest,
  common_pb.StringValue,
  /**
   * @param {!proto.admin.AdminLoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.StringValue.deserializeBinary
);


/**
 * @param {!proto.admin.AdminLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.StringValue)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.StringValue>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/login',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_login,
      callback);
};


/**
 * @param {!proto.admin.AdminLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.StringValue>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/login',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.common.Empty>}
 */
const methodDescriptor_AdminAuthenticationService_logout = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/logout',
  grpc.web.MethodType.UNARY,
  common_pb.Empty,
  common_pb.Empty,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.logout =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/logout',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_logout,
      callback);
};


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.logout =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/logout',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_logout);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.AdminChangePasswordRequest,
 *   !proto.common.Empty>}
 */
const methodDescriptor_AdminAuthenticationService_change_password = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/change_password',
  grpc.web.MethodType.UNARY,
  admin_pb.AdminChangePasswordRequest,
  common_pb.Empty,
  /**
   * @param {!proto.admin.AdminChangePasswordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.admin.AdminChangePasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.change_password =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/change_password',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_change_password,
      callback);
};


/**
 * @param {!proto.admin.AdminChangePasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.change_password =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/change_password',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_change_password);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.AdminCreateRequest,
 *   !proto.common.Empty>}
 */
const methodDescriptor_AdminAuthenticationService_create_admin = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/create_admin',
  grpc.web.MethodType.UNARY,
  admin_pb.AdminCreateRequest,
  common_pb.Empty,
  /**
   * @param {!proto.admin.AdminCreateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.admin.AdminCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.create_admin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/create_admin',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_create_admin,
      callback);
};


/**
 * @param {!proto.admin.AdminCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.create_admin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/create_admin',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_create_admin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.common.Empty>}
 */
const methodDescriptor_AdminAuthenticationService_delete_admin = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/delete_admin',
  grpc.web.MethodType.UNARY,
  common_pb.StringValue,
  common_pb.Empty,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.delete_admin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/delete_admin',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_delete_admin,
      callback);
};


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.delete_admin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/delete_admin',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_delete_admin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.admin.AdminList>}
 */
const methodDescriptor_AdminAuthenticationService_get_admins = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/get_admins',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.Empty,
  admin_pb.AdminList,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  admin_pb.AdminList.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.AdminList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.get_admins =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminAuthenticationService/get_admins',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_get_admins);
};


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.AdminList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.get_admins =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminAuthenticationService/get_admins',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_get_admins);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.admin.Admin>}
 */
const methodDescriptor_AdminAuthenticationService_get_current_admin = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/get_current_admin',
  grpc.web.MethodType.UNARY,
  common_pb.Empty,
  admin_pb.Admin,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  admin_pb.Admin.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.Admin)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.Admin>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.get_current_admin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/get_current_admin',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_get_current_admin,
      callback);
};


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.Admin>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.get_current_admin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/get_current_admin',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_get_current_admin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.common.BoolValue>}
 */
const methodDescriptor_AdminAuthenticationService_validate_token = new grpc.web.MethodDescriptor(
  '/admin.AdminAuthenticationService/validate_token',
  grpc.web.MethodType.UNARY,
  common_pb.Empty,
  common_pb.BoolValue,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.BoolValue.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.BoolValue)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.BoolValue>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminAuthenticationServiceClient.prototype.validate_token =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminAuthenticationService/validate_token',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_validate_token,
      callback);
};


/**
 * @param {!proto.common.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.BoolValue>}
 *     Promise that resolves to the response
 */
proto.admin.AdminAuthenticationServicePromiseClient.prototype.validate_token =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminAuthenticationService/validate_token',
      request,
      metadata || {},
      methodDescriptor_AdminAuthenticationService_validate_token);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminUserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminUserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.auth.UserAccountList>}
 */
const methodDescriptor_AdminUserService_get_new_riders = new grpc.web.MethodDescriptor(
  '/admin.AdminUserService/get_new_riders',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.Empty,
  auth_pb.UserAccountList,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  auth_pb.UserAccountList.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.auth.UserAccountList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.get_new_riders =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_new_riders',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_new_riders);
};


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.auth.UserAccountList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServicePromiseClient.prototype.get_new_riders =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_new_riders',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_new_riders);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.admin.RiderList>}
 */
const methodDescriptor_AdminUserService_get_riders = new grpc.web.MethodDescriptor(
  '/admin.AdminUserService/get_riders',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.Empty,
  admin_pb.RiderList,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  admin_pb.RiderList.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.RiderList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.get_riders =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_riders',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_riders);
};


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.RiderList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServicePromiseClient.prototype.get_riders =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_riders',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_riders);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.admin.CustomerList>}
 */
const methodDescriptor_AdminUserService_get_customers = new grpc.web.MethodDescriptor(
  '/admin.AdminUserService/get_customers',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.Empty,
  admin_pb.CustomerList,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  admin_pb.CustomerList.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.CustomerList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.get_customers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_customers',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_customers);
};


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.CustomerList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServicePromiseClient.prototype.get_customers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_customers',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_customers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.UpdateAccountStatusRequest,
 *   !proto.common.Empty>}
 */
const methodDescriptor_AdminUserService_update_user_status = new grpc.web.MethodDescriptor(
  '/admin.AdminUserService/update_user_status',
  grpc.web.MethodType.UNARY,
  auth_pb.UpdateAccountStatusRequest,
  common_pb.Empty,
  /**
   * @param {!proto.auth.UpdateAccountStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.auth.UpdateAccountStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.update_user_status =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminUserService/update_user_status',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_update_user_status,
      callback);
};


/**
 * @param {!proto.auth.UpdateAccountStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.update_user_status =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminUserService/update_user_status',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_update_user_status);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.admin.RiderDetails>}
 */
const methodDescriptor_AdminUserService_get_rider = new grpc.web.MethodDescriptor(
  '/admin.AdminUserService/get_rider',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.StringValue,
  admin_pb.RiderDetails,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  admin_pb.RiderDetails.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.RiderDetails>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.get_rider =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_rider',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_rider);
};


/**
 * @param {!proto.common.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.RiderDetails>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServicePromiseClient.prototype.get_rider =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminUserService/get_rider',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_get_rider);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminSubscriptionServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminSubscriptionServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.subscription.Subscription>}
 */
const methodDescriptor_AdminSubscriptionService_get_subscription_for_rider = new grpc.web.MethodDescriptor(
  '/admin.AdminSubscriptionService/get_subscription_for_rider',
  grpc.web.MethodType.UNARY,
  common_pb.StringValue,
  subscription_pb.Subscription,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  subscription_pb.Subscription.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.subscription.Subscription)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.subscription.Subscription>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminSubscriptionServiceClient.prototype.get_subscription_for_rider =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.AdminSubscriptionService/get_subscription_for_rider',
      request,
      metadata || {},
      methodDescriptor_AdminSubscriptionService_get_subscription_for_rider,
      callback);
};


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.subscription.Subscription>}
 *     Promise that resolves to the response
 */
proto.admin.AdminSubscriptionServicePromiseClient.prototype.get_subscription_for_rider =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.AdminSubscriptionService/get_subscription_for_rider',
      request,
      metadata || {},
      methodDescriptor_AdminSubscriptionService_get_subscription_for_rider);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminOrderServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminOrderServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.order.OrderList>}
 */
const methodDescriptor_AdminOrderService_get_orders_for_rider = new grpc.web.MethodDescriptor(
  '/admin.AdminOrderService/get_orders_for_rider',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.StringValue,
  order_pb.OrderList,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  order_pb.OrderList.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.order.OrderList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminOrderServiceClient.prototype.get_orders_for_rider =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminOrderService/get_orders_for_rider',
      request,
      metadata || {},
      methodDescriptor_AdminOrderService_get_orders_for_rider);
};


/**
 * @param {!proto.common.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.order.OrderList>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminOrderServicePromiseClient.prototype.get_orders_for_rider =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminOrderService/get_orders_for_rider',
      request,
      metadata || {},
      methodDescriptor_AdminOrderService_get_orders_for_rider);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminStatsServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminStatsServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.admin.Stats>}
 */
const methodDescriptor_AdminStatsService_get_stats = new grpc.web.MethodDescriptor(
  '/admin.AdminStatsService/get_stats',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.Empty,
  admin_pb.Stats,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  admin_pb.Stats.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.Stats>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminStatsServiceClient.prototype.get_stats =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminStatsService/get_stats',
      request,
      metadata || {},
      methodDescriptor_AdminStatsService_get_stats);
};


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.admin.Stats>}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminStatsServicePromiseClient.prototype.get_stats =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/admin.AdminStatsService/get_stats',
      request,
      metadata || {},
      methodDescriptor_AdminStatsService_get_stats);
};


module.exports = proto.admin;

