/**
 * @fileoverview gRPC-Web generated client stub for subscription
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: subscription_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pb = require('./common_pb.js')

var subscription_pb = require('./subscription_pb.js')
const proto = {};
proto.subscription = require('./subscription_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.subscription.SubscriptionServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.subscription.SubscriptionServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.subscription.SubscriptionRequest,
 *   !proto.common.StringValue>}
 */
const methodDescriptor_SubscriptionService_subscribe = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/subscribe',
  grpc.web.MethodType.UNARY,
  subscription_pb.SubscriptionRequest,
  common_pb.StringValue,
  /**
   * @param {!proto.subscription.SubscriptionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.StringValue.deserializeBinary
);


/**
 * @param {!proto.subscription.SubscriptionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.StringValue)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.StringValue>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.subscribe =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/subscribe',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_subscribe,
      callback);
};


/**
 * @param {!proto.subscription.SubscriptionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.StringValue>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.subscribe =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/subscribe',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_subscribe);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.subscription.Subscription>}
 */
const methodDescriptor_SubscriptionService_get_subscription_for_rider = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/get_subscription_for_rider',
  grpc.web.MethodType.UNARY,
  common_pb.StringValue,
  subscription_pb.Subscription,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  subscription_pb.Subscription.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.subscription.Subscription)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.subscription.Subscription>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.get_subscription_for_rider =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/get_subscription_for_rider',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_subscription_for_rider,
      callback);
};


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.subscription.Subscription>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.get_subscription_for_rider =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/get_subscription_for_rider',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_subscription_for_rider);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.common.Empty>}
 */
const methodDescriptor_SubscriptionService_revoke_subscription = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/revoke_subscription',
  grpc.web.MethodType.UNARY,
  common_pb.StringValue,
  common_pb.Empty,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.revoke_subscription =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/revoke_subscription',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_revoke_subscription,
      callback);
};


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.revoke_subscription =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/revoke_subscription',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_revoke_subscription);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.subscription.GetSubscriptionsRequest,
 *   !proto.subscription.SubscriptionList>}
 */
const methodDescriptor_SubscriptionService_get_subscriptions = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/get_subscriptions',
  grpc.web.MethodType.UNARY,
  subscription_pb.GetSubscriptionsRequest,
  subscription_pb.SubscriptionList,
  /**
   * @param {!proto.subscription.GetSubscriptionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  subscription_pb.SubscriptionList.deserializeBinary
);


/**
 * @param {!proto.subscription.GetSubscriptionsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.subscription.SubscriptionList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.subscription.SubscriptionList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.get_subscriptions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/get_subscriptions',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_subscriptions,
      callback);
};


/**
 * @param {!proto.subscription.GetSubscriptionsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.subscription.SubscriptionList>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.get_subscriptions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/get_subscriptions',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_subscriptions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.Empty,
 *   !proto.subscription.RiderSubscriptionPackageList>}
 */
const methodDescriptor_SubscriptionService_get_riders_subscriptions = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/get_riders_subscriptions',
  grpc.web.MethodType.SERVER_STREAMING,
  common_pb.Empty,
  subscription_pb.RiderSubscriptionPackageList,
  /**
   * @param {!proto.common.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  subscription_pb.RiderSubscriptionPackageList.deserializeBinary
);


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.subscription.RiderSubscriptionPackageList>}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.get_riders_subscriptions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/subscription.SubscriptionService/get_riders_subscriptions',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_riders_subscriptions);
};


/**
 * @param {!proto.common.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.subscription.RiderSubscriptionPackageList>}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.get_riders_subscriptions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/subscription.SubscriptionService/get_riders_subscriptions',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_riders_subscriptions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.subscription.SubscriptionPackageList>}
 */
const methodDescriptor_SubscriptionService_get_subscription_packages = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/get_subscription_packages',
  grpc.web.MethodType.UNARY,
  common_pb.StringValue,
  subscription_pb.SubscriptionPackageList,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  subscription_pb.SubscriptionPackageList.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.subscription.SubscriptionPackageList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.subscription.SubscriptionPackageList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.get_subscription_packages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/get_subscription_packages',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_subscription_packages,
      callback);
};


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.subscription.SubscriptionPackageList>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.get_subscription_packages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/get_subscription_packages',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_get_subscription_packages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.subscription.SubscriptionPackage,
 *   !proto.common.Empty>}
 */
const methodDescriptor_SubscriptionService_create_subscription_package = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/create_subscription_package',
  grpc.web.MethodType.UNARY,
  subscription_pb.SubscriptionPackage,
  common_pb.Empty,
  /**
   * @param {!proto.subscription.SubscriptionPackage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.subscription.SubscriptionPackage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.create_subscription_package =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/create_subscription_package',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_create_subscription_package,
      callback);
};


/**
 * @param {!proto.subscription.SubscriptionPackage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.create_subscription_package =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/create_subscription_package',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_create_subscription_package);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.subscription.SubscriptionPackage,
 *   !proto.common.Empty>}
 */
const methodDescriptor_SubscriptionService_update_subscription_package = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/update_subscription_package',
  grpc.web.MethodType.UNARY,
  subscription_pb.SubscriptionPackage,
  common_pb.Empty,
  /**
   * @param {!proto.subscription.SubscriptionPackage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.subscription.SubscriptionPackage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.update_subscription_package =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/update_subscription_package',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_update_subscription_package,
      callback);
};


/**
 * @param {!proto.subscription.SubscriptionPackage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.update_subscription_package =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/update_subscription_package',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_update_subscription_package);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.StringValue,
 *   !proto.common.Empty>}
 */
const methodDescriptor_SubscriptionService_delete_subscription_package = new grpc.web.MethodDescriptor(
  '/subscription.SubscriptionService/delete_subscription_package',
  grpc.web.MethodType.UNARY,
  common_pb.StringValue,
  common_pb.Empty,
  /**
   * @param {!proto.common.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.subscription.SubscriptionServiceClient.prototype.delete_subscription_package =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/subscription.SubscriptionService/delete_subscription_package',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_delete_subscription_package,
      callback);
};


/**
 * @param {!proto.common.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.Empty>}
 *     Promise that resolves to the response
 */
proto.subscription.SubscriptionServicePromiseClient.prototype.delete_subscription_package =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/subscription.SubscriptionService/delete_subscription_package',
      request,
      metadata || {},
      methodDescriptor_SubscriptionService_delete_subscription_package);
};


module.exports = proto.subscription;

